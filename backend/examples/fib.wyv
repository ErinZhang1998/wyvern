// Prelude

def doif(condition : Boolean, tt:IfTSL.FnExpr, ff:IfTSL.FnExpr) : Dyn
  condition.ifTrue(() => tt.apply(), () => ff.apply())

def doifblk(condition : Boolean, block:IfTSL.Blocks) : Dyn
  condition.ifTrue(() => block.evalTrue(), () => block.evalFalse())

val ifelseARG = (cond:Boolean, tt:IfTSL.FnExpr, ff:IfTSL.FnExpr) => doif(cond, tt, ff)
val if = (cond:Boolean, blocks:IfTSL.Blocks) => doifblk(cond, blocks)

// stub, overridden by js backend
def print(x: Dyn): Unit
    unit

def println(): Unit
    print("\n")

// End prelude

def fib(n: Int): Int
    if (n < 2)
            n
        else
            fib(n-1) + fib(n-2)

def loop(i: Int): Unit
    if (i == 10)
            unit
        else
            print(fib(i))
            println()
            loop(i + 1)

loop(0)
