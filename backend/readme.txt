In the current state of the backend, most unmodified programs do not work
because modules and ffi aren't implemented. I wrote some some hand-modified
programs that do work currently and put them in the examples/ directory

Here's how to run one of them. Note that some examples take a very long time to
compile because the performance of the wyvern interpreter isn't the best right
now. lambda.wyv takes ~2min to compile and most other programs take ~5-30s on a
fast computer.

First run the frontend bytecode compiler on the program.

$ cd wyvern/backend/
$ wyby examples/mandelbrot.wyv # wyby is in wyvern/bin

This prints the program's CoreWyvernIL for debugging purposes and writes out
examples/mandelbrot.wyb

Edit src/backend.wyv's loadBytecode() line at the end of the file to load the
desired bytecode file (wyvern doesn't have command line arguments right now).

$ vim src/backend.wyv

And change the line near the end:

"val wyb = bytecode.loadBytecode("../examples/mandelbrot.wyb")"

Now you can run the backend:

$ cd src/ # need to be here for wyvern modules to resolve
$ wyvern backend.wyv > out.js
$ node out.js

Right now the generated code is very poorly formatted, so if you want to look
at it a javascript prettifier like prettier is recommended.

================================================================================

If you make changes to the bytecode.proto file, you'll have to regenerate the
autogenerated java code which the backend FFIs into:

$ protoc bytecode.proto --java_out=../tools/src/

The autogenerated code makes the linter upset, so turn it off for that file:

$ vim ../tools/src/wyvern/stdlib/support/backend/BytecodeOuterClass.java
And add to the top of the file:

"// CHECKSTYLE:OFF"

Then rebuild:

$ cd ../tools
$ ant build
