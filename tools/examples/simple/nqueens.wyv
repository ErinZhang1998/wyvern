/**
 * A simple row, column Position abstraction
 */

class Position
	val row:Int
	val col:Int
	class meth make(r:Int, c:Int):Position =
		new
			row = r
			col = c

// Test code
// printInteger(Position.make(1,2).row)


/**
 * A simple Position list abstraction, with functional abstractions for computation
 */

type PositionList
	meth isEmpty():Bool
	meth forEach(f:Position -> Unit):Unit
	meth reduce(identity:Bool, f:Position -> Bool, c:Bool -> Bool -> Bool):Bool

class Cons
	implements PositionList // do we want this to be indented?
	
	var v:Position
	var n:PositionList
	
	meth isEmpty():Bool = false
	meth forEach(f:Position -> Unit):Unit =
		f(this.v)
		this.n.forEach(f)
	meth reduce(identity:Bool, f:Position -> Bool, c:Bool -> Bool -> Bool):Bool =
		val nextResult : Bool = this.n.reduce(identity,f,c)
		c(f(this.v))(nextResult)
	
	class meth make(value:Position,next:PositionList):PositionList =
		new
			v = value
			n = next
	
class Nil
	implements PositionList
	
	meth isEmpty():Bool = true
	meth forEach(f:Position -> Unit):Unit = ()
	meth reduce(identity:Bool, f:Position -> Bool, c:Bool -> Bool -> Bool):Bool = identity
	class meth make():PositionList = new
	
val nil : PositionList = Nil.make()

meth printBoolean(b:Bool):Unit =
	if b
		then
			print("true")
		else
			print("false")
	
meth not(b:Bool):Bool =
	if b
		then
			false
		else
			true
	
meth isSafe(board:PositionList, row:Int, col:Int):Bool =
	meth isSafeWith(pos:Position):Bool =
		val delta : Int = col - pos.col
		val isUnsafe : Bool = (row == pos.row) || (row == pos.row + delta) || (row == pos.row - delta)
		not(isUnsafe)
		
	// TODO: refactor to a meth, and use a product type for the argument instead of currying?
	// TODO: just use && as the function
	meth combine : Bool -> Bool -> Bool =
		fn b1:Bool => fn b2:Bool => b1 && b2
		
	board.reduce(true, isSafeWith, combine)
	
// Test code
// val cornerBoard : PositionList = Cons.make(Position.make(0,0),nil)
// printBoolean(isSafe(nil, 5, 5))
// printBoolean(isSafe(cornerBoard, 5, 5))
// printBoolean(isSafe(cornerBoard, 4, 5))
	
class Range
	val low : Int
	val high : Int
	
	meth reduce(identity:Int, f:Int -> Int, c:Int -> (Int -> Int)):Int =
		meth helper(x:Int):Int =
			if x == this.high
				then
					identity
				else
					val nextAnswer : Int = helper(x+1)
					c(nextAnswer)(f(x))
		helper(this.low)
		
	class meth make(l:Int,h:Int):Range =
		new
			low = l
			high = h
	
meth place(board:PositionList, col:Int, maxCol:Int):Int
	if (col == maxCol)
		then
			1
		else
			meth rowTest(row:Int):Int =
				if isSafe(board, row, col)
					then
						val pos:Position = Position.make(row, col)
						place(Cons.make(pos,board), col+1, maxCol)
					else
						0
			Range.make(0,maxCol).reduce(0,rowTest,fn x:Int=>fn y:Int=>x+y)
		
meth nQueens(size:Int):Int =
	place(nil,0,size)
	
printInteger(nQueens(8))
	
