// view this example with 4-space tabs

// may want principal-centric view of security policy
	// e.g. could say that a principal could only see data returned by a particular query
// instead of, or in addition to, a data-centric view
// "who can see this data" vs. "what data can principal X see"
// role abstractions for data: all data tagged with X can be accessed in this way...
	// reading, writing, only send a password if its hashed
	// access restrictions could be specified via a user-defined predicate
	// may include data restrictions: e.g. what tags can be in HTML?  maybe no <script> tags
// talk with Lorrie Cranor about this
// ability to separate policy from code, but have tools support views interleaving policy & code
// statically verify that security checks are done
	// the checks themselves may be implemented manually in a library and verified via inspection
// security checks: automated attack test generation, model checking, etc.


webapp Boxes
	root principal #server
	principals server.users, null
		
	webserver server
		users : Set<User>
			@database(SQLiteDBManager)
			@writable #server

		actsfor #server
		method actsfor client.clientPrincipal	// shorthand for @actsfor annotation
												// on each method of server
		
		urls
			"/" => home
			"/main" => main
			
		method home() : Page = LoginControl(Nonce())
		method main() : Page = MainControl(users)
		
		method validate(user : User, nonce : Nonce, password : HashedString) : Page
			actsfor #server
				User? candidate = users.find(name == username)
				if (candidate.password == password)		// hashing is not right yet
					client.clientPrincipal = candidate
					return MainControl(user, users)
				else
					return ErrorScreen()

		method getData() : Page
			// implicitly acts for the client who called it
		
	template client : browser
		ghost var clientPrincipal : User?
			@writable #server
		actsfor clientPrincipal
	
	template connect client to server with HTTPS

	type User
		prop name : String
		prop passwd : HashedString	// stored hashed
		prop box : Box

	type Box
		// make this more interesting by allowing HTML in a Box's contents
		var contents : String
			@readable readers		// do we need an @ to support extensibility?
			@writable owner
		prop owner : User			// relationship
		prop readers : Set<User>	// relationship - inverse is box
			@writable owner
			
	@runson(client)
	screen Login(nonce : Nonce)
		Row
			Label "User:"
			username : TextInput
		Row
			Label "Password:"
			password : TextInput	// annotate that this is a password
				@writable clientPrincipal
				@hashreadable #server
		Row
			login : Button "Login"
				method action()
					displayPage(server.validate(username, nonce, hash(password.value, nonce)))

	// TODO: describe how it is populated and its actions
	// see functionality from earlier version
	@runson(client)
	screen Main
		Row
			Label "My Box Contents"
			contents : TextInput
		Row
			Label "Permissions"
		Row
			permissionTable : template
				Row
					user : Label
					permission : CheckBox
		Row
			Label "Other Boxes"
		Row
			boxViews : template
				Row
					owner : Label
					boxContents : Label

