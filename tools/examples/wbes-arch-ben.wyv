architecture WbesArch //Defines a new architecture
	endpoint Client 
		//Defines a location that requests begin and end at.
		//An endpoint is transformed into a Type that implements all of the receiver interfaces
		//This type is either subclassed for objects receiving, or is converted into an adapter class to preform RMI
		//on the transmit side
		connects Server //DI - injects an instance of Server into each Client class
	endpoint Server
		connects many Client //No DI - each method call is passed a (potentially) unique Client
	endpoint DBServer
		connects many Server 
	
	domain Server -> DBServer //Defines which endpoints are connected
		via SecureConnection //Which type of connection to use
			//These connections inherit Server->DBServer and via SecureConnection
			connection findArticleIDByName ( name : Str ) : ArticleID
			connection getArticleFromDB (id : ArticleID) : Article
			connection updateArticle (id : ArticleID, newText : Str) : Unit
	
	domain Client -> Server
		via SecureConnection
			connection authenticate(user : Str, pass : Byte[]) : Bool
				
			connection hasAuthenticated() : Bool
			
			connection isAuthorized(id : ArticleID) : Bool
			
			connection changePassword(newPass : Str) : Bool
				requires hasAuthenticated() 
				//requires requires the given method to be: a connection with the same domain and connection type, and boolean return. 
				//Checked on receiver side.
				
			connection modifyArticle(id : ArticleID, newText : Str) : Unit
				requires isAuthorized(id)
			
			requires WebesSuperClient //Ensures that the connected is of type WebesSuperClient (Is this really needed?)
				requires hasAuthenticated()
					connection addNewWriter (username : Str) : Unit
					connection deleteWriter (username : Str) : Unit
					connection deleteArticle (id : ArticleID) : Unit
			
		via TCPConnection
			connection findArticleIDByName (name : Str) : ArticleID
			
			connection getArticle(id : ArticleID) : Article

class WbesClient : Client 
	val server : Server //DI. Represents the standard interface to the server (defined by connections)
	meth main() =
		server.authenticate(user, pass)
		
class WbesSuperClient : Client
	val server : Server
	...
	
class WbesServer : Server
	meth authenticate(client : Client, user : Str, pass : byte[]) : Bool =
		//Do auth
	
	meth hasAuthenticated(client : Client) : Bool =
		//Do auth
	
	meth changePassword(client : Client, newPass : Str) : Unit = 
		//Change password

class WbesDBServer : DBServer
	...
		