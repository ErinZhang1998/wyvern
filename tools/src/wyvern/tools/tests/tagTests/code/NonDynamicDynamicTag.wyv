type IA
       def foo() : Int

type M
       type A
               def foo() : Int
       def createA() : A

def f() : M = new
       type A
               def foo() : Int
       def createA() : A = new
               def foo() = 1


def g(m:M) : M = new
       type A
               def foo() : Int
       def createA() : A = new
               def foo() : Int = 2

val m1:M = f()
val m2:M = g(m1)
val m3:M = g(m1)

val m1a : M.A = m1.createA()
val m2a : M.A = m2.createA()
val m3a : M.A = m3.createA()

printInteger(m1a.foo()) // 1
printInteger(m2a.foo()) // 2
printInteger(m3a.foo()) // 2

//for testing evaluation purposes
m2a.foo()