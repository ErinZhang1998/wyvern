resource module main

import wyvern_reflect_base
import Lists
import java:wyvern.tools.tests.ReflectionTests.tools

type Any

type IntObj
	val contents : Int
	def add(x:IntObj) : Int

type StringObj
    val contents : String

def makeInt(contents:Int) : IntObj = new
    val contents = contents
    def add(x:IntObj) : Int = tools.add(this.contents, x.contents)

val intObj : IntObj = makeInt(47)

val stringObj : StringObj = new
    val contents = "reflection in wyvern!"

// Test objects with different types aren't equal
val intMirror : wyvern_reflect_base.Object = wyvern_reflect_base.reflect(intObj)
val intType : wyvern_reflect_base.Type = intMirror.typeOf()
val stringMirror : wyvern_reflect_base.Object = wyvern_reflect_base.reflect(stringObj)
val typeNotEqual : Int = intType.equals(stringMirror.typeOf())
tools.assertIntEquals(typeNotEqual, 0)

val typeName : String = intType.name()
tools.assertStringEquals("IntObj", typeName)

val l = Lists.cons(makeInt(5), Lists.empty(makeInt(0)))
val sum : Any = intMirror.invoke("add", l)
// Can't use because sum is supposed to be a mirror
// tools.assertIntEquals(sum, 52)
