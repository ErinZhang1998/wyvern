options
{
    //BUILD_PARSER = false;
	MULTI = true;
	VISITOR = true;
    STATIC = false;
    USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(ArchParser)

package wyvern.tools.parsing.coreparser;

import java.util.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;
import java.io.StringReader;
import wyvern.tools.lexing.archlexer.ArchLexer;
import java.io.FileNotFoundException;
import edu.umn.cs.melt.copper.runtime.logging.CopperParserException;
import java.io.IOException;

import static wyvern.tools.parsing.coreparser.ArchParserConstants.COMPONENT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.PORT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.COLON;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.WHITESPACE;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.INDENT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.DEDENT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.IDENTIFIER;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.NEWLINE;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.PROVIDES;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.REQUIRES;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.CONNECTOR;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.VAL;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.ARCHITECTURE;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.COMPONENTS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.CONNECTORS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.AND;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.WITH;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.CONNECT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.DOT;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.IS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.ENTRYPOINTS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.BINDINGS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.ATTACHMENTS;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.COMMA;
import static wyvern.tools.parsing.coreparser.ArchParserConstants.MULTI_LINE_COMMENT;

public class ArchParser   { 
    public static String kindToName(int kind) {
      switch (kind) {
      case MULTI_LINE_COMMENT: return "MULTI_LINE_COMMENT";
      case COMMA: return "COMMA";
      case ATTACHMENTS: return "ATTACHMENTS";
      case IS: return "IS";
      case BINDINGS: return "BINDINGS";
      case ENTRYPOINTS: return "ENTRYPOINTS";
      case CONNECT: return "CONNECT";
      case DOT: return "DOT";
      case AND: return "AND";
      case WITH: return "WITH";
      case CONNECTORS: return "CONNECTORS";
      case COMPONENTS: return "COMPONENTS";
      case ARCHITECTURE: return "ARCHITECTURE";
      case VAL: return "VAL";
      case CONNECTOR: return "CONNECTOR";
      case COMPONENT: return "COMPONENT";
      case PORT: return "PORT";
      case COLON: return "COLON";
      case IDENTIFIER: return "IDENTIFIER";
      case WHITESPACE: return "WHITESPACE";
      case DEDENT: return "DEDENT";
      case INDENT: return "INDENT";
      case NEWLINE: return "NEWLINE";
      case PROVIDES: return "PROVIDES";
      case REQUIRES: return "REQUIRES";
      default: return "UNKNOWN(" + kind + ")";
      }
    }
    
    public static void main(String []args) throws CopperParserException, IOException, FileNotFoundException {
        BufferedReader source = new BufferedReader(new FileReader("C:\u005c\u005cUsers\u005c\u005cAmanda Liu\u005c\u005cwyvern\u005c\u005c"
                                                                  //    + "example1.wyc"
                                                                      + "example2.wyc"
                                                                  //    + "example3.wyc"
                                                                    ));
        ArchParser wp = new ArchParser(
                new WyvernTokenManager<ArchLexer, ArchParserConstants>(source, "test", ArchLexer.class,
                        ArchParserConstants.class));

        /*Full list of tokens as collected by the token manager
        List<Token> tokens = new ArchLexer().parse(source, "test");
        for (Token t: tokens) {
          if (!kindToName(t.kind).equals("WHITESPACE")){
            System.out.println(kindToName(t.kind));
          }
        }*/
        
        //Parsing attempt
        try {
          wp.ArchDesc();
        } catch (ParseException e)  {
          e.printStackTrace();
        }

        /*What's left after parsing attempt*/
        Token t = wp.getNextToken();
        while (!kindToName(t.kind).equals("UNKNOWN(0)")){
            System.out.println(kindToName(t.kind));
            t = wp.getNextToken();
        }
        
        System.out.println("~PARSING DONE~");

    }
}

PARSER_END(ArchParser)

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Keywords */
{
  <COMPONENT: "component">
| <EXTERNAL: "external">
| <PORT: "port">
| <PROVIDES: "provides">
| <REQUIRES: "requires">
| <CONNECTOR: "connector">
| <VAL: "val">
| <ARCHITECTURE: "architecture">
| <COMPONENTS: "components">
| <CONNECTORS: "connectors">
| <ATTACHMENTS: "attachments">
| <CONNECT: "connect">
| <AND: "and">
| <WITH: "with">
| <ENTRYPOINTS: "entryPoints">
| <BINDINGS: "bindings">
| <IS: "is">
}

TOKEN : /* Logical Formatting */
{
  <DEDENT>
| <INDENT>
| <NEWLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <COLON: ":">
| <DOT: ".">
| <COMMA: ",">
}

/** Root production. */
void ArchDesc() :
{ Node exp; }
{
    exp = ArchTypeDeclSeq()
}

AST ArchTypeDeclSeq() : 
{ Node ast1; Node ast2; }
{
    ast1 = ArchTypeDecls() 
    ( ast2 = ArchTypeDecls() {  } )*
    { return null; }
|
    <EOF>
    { return null; }
    //{ return ast1; }
}

Node ArchTypeDecls() : 
{ Node exp; }
{
    exp = ComponentTypeDecl()       { return null; }//{ return exp; }
|
    exp = ConnectorTypeDecl()       { return null; }//{ return exp; }
|
    exp = ArchitectureTypeDecl()    { return null; }//{ return exp; }
}

Node ComponentTypeDecl() : 
{ Token name; boolean isExternal; AST exp1; AST exp2; }
{
    [ <EXTERNAL> { isExternal=true; } ] <COMPONENT> name=<IDENTIFIER>
    <NEWLINE> <INDENT> exp1 = ComponentTypeDeclBody()
            ( exp2 = ComponentTypeDeclBody() {  } )*
            <DEDENT>
    { return null; }//{ return build.componentTypeDecl(); }
}


Node ComponentTypeDeclBody() : 
{ Node ast1; Node ast2; }
{
    ast1 = MemberDecls()            { return null; }//{ return ast1; }
|
    ast1 = ArchTypeDecls()          { return null; }//{ return ast1; }
|
    ast1 = BindingDecls()           { return null; }//{ return ast1; }

}

Node ConnectorTypeDecl() : 
{ Token name; Node exp1; Node exp2; }
{
    <CONNECTOR> name=<IDENTIFIER>
    <NEWLINE> <INDENT> exp1 = ValDecl()
    (exp2 = ValDecl())*
            <DEDENT>
    { return null; }
}

Node ArchitectureTypeDecl() : 
{ Token name; Node body; }
{
    <ARCHITECTURE> name=<IDENTIFIER>
    <NEWLINE> <INDENT> body = ArchElemDeclSeq()
            <DEDENT>
    { return null; }//{ return build.architectureTypeDecl(); }
}

Node ArchElemDeclSeq() : 
{ Node exp1; Node exp2; }
{
    exp1 = ArchElemDecls() 
    (exp2 = ArchElemDecls() { } )*
    { return null; }
}

Node ArchElemDecls() : 
{ Node exp; }
{
    exp = ComponentDecls()      { return null; }//{ return exp; }
|
    exp = ConnectorDecls()      { return null; }//{ return exp; }
|
    exp = AttachmentDecls()     { return null; }//{ return exp; }
|
    exp = EntryPointDecls()     { return null; }//{ return exp; }
}

Node ComponentDecls() :
{ Token type; Token name; boolean isExternal = false; List types; List names; }
{
    <COMPONENTS>
    <NEWLINE> <INDENT> 
            type=<IDENTIFIER> name=<IDENTIFIER> ( <COMMA> <IDENTIFIER> )* <NEWLINE>
            (type=<IDENTIFIER> name=<IDENTIFIER> ( <COMMA> <IDENTIFIER> )*  <NEWLINE>)*
            <DEDENT>
    { return null; }
}

Node ConnectorDecls() : 
{ Token type; Token name; boolean isExternal = false; }
{
    <CONNECTORS> 
    <NEWLINE> <INDENT> 
            type=<IDENTIFIER> name=<IDENTIFIER> ( <COMMA> <IDENTIFIER> )* <NEWLINE>
            (type=<IDENTIFIER> name=<IDENTIFIER> ( <COMMA> <IDENTIFIER> )*  <NEWLINE>)*
            <DEDENT>
    { return null; }
}

Node AttachmentDecls() : 
{ String p1; String p2; Token cntr; }
{
    //allow for multiple cmp.prt in connect statement
    <ATTACHMENTS>
    <NEWLINE> <INDENT> 
    <CONNECT> p1=Segment() <AND> p2=Segment() ( <AND> Segment() )* <WITH> cntr=<IDENTIFIER> <NEWLINE>
              (p1=Segment() <AND> p2=Segment() ( <AND> Segment() )* <WITH> cntr=<IDENTIFIER> <NEWLINE>)*
            <DEDENT>
    { return null; }
}

Node BindingDecls() :
{ Token t; String b; }
{
    <BINDINGS>
    <NEWLINE> <INDENT> t=<IDENTIFIER> <IS> b=Segment() <NEWLINE>
    (t=<IDENTIFIER> <IS> b=Segment() {} <NEWLINE> )*
    <DEDENT>
    { return null; }
}

Node EntryPointDecls() : 
{ Token t; Token point; }
{
    <ENTRYPOINTS>
    <NEWLINE> <INDENT> <IDENTIFIER> <COLON> <IDENTIFIER> <NEWLINE>
    (<IDENTIFIER> <COLON> <IDENTIFIER> <NEWLINE>)* 
            <DEDENT>
    { return null; }
}

Node MemberDecls() :
{ Node exp1; Node exp2; }
{
    ( exp1 = ValDecl() | exp1 = PortDecl() )
    { return null; }//{ return exp1; }
}

Node PortDecl() :
{ Token p; Token req = null; Token prov = null; }
{
    <PORT> p=<IDENTIFIER> <COLON> (<REQUIRES> req=<IDENTIFIER> | 
                        <PROVIDES> prov=<IDENTIFIER>) <NEWLINE>
    { return null; }//{ return build.portDecl(); }
}

Node ValDecl() :
{ Token t; Token name; }
{
    <VAL> name=<IDENTIFIER> <COLON> t=<IDENTIFIER> <NEWLINE>
    { return null; }//{ return build.valDecl(); }
}

String Segment() : 
{ String s; Token t; }
{
    t=<IDENTIFIER> { s = t.image; }
    ( <DOT> t=<IDENTIFIER> { s = s + "." + t.image; } )* 
    { return null; }//{ return s; }
}








