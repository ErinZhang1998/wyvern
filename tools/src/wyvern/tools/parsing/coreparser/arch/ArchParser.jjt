options
{
    //BUILD_PARSER = false;
	MULTI = true;
	VISITOR = true;
    STATIC = false;
    USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(ArchParser)

package wyvern.tools.parsing.coreparser.arch;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import wyvern.tools.arch.lexing.ArchLexer;
import java.io.FileNotFoundException;
import java.io.IOException;
import edu.umn.cs.melt.copper.runtime.logging.CopperParserException;
import wyvern.tools.parsing.coreparser.WyvernTokenManager;
import wyvern.tools.parsing.coreparser.TokenManager;
import wyvern.tools.parsing.coreparser.Token;
import wyvern.tools.parsing.coreparser.ParseException;

public class ArchParser   { 

    public static String kindToName(int kind) {
      switch (kind) {
      case MULTI_LINE_COMMENT: return "MULTI_LINE_COMMENT";
      case COMMA: return "COMMA";
      case ATTACHMENTS: return "ATTACHMENTS";
      case IS: return "IS";
      case BINDINGS: return "BINDINGS";
      case ENTRYPOINTS: return "ENTRYPOINTS";
      case CONNECT: return "CONNECT";
      case DOT: return "DOT";
      case AND: return "AND";
      case WITH: return "WITH";
      case CONNECTORS: return "CONNECTORS";
      case COMPONENTS: return "COMPONENTS";
      case ARCHITECTURE: return "ARCHITECTURE";
      case VAL: return "VAL";
      case CONNECTOR: return "CONNECTOR";
      case COMPONENT: return "COMPONENT";
      case PORT: return "PORT";
      case COLON: return "COLON";
      case IDENTIFIER: return "IDENTIFIER";
      case WHITESPACE: return "WHITESPACE";
      case DEDENT: return "DEDENT";
      case INDENT: return "INDENT";
      case NEWLINE: return "NEWLINE";
      case PROVIDES: return "PROVIDES";
      case REQUIRES: return "REQUIRES";
      default: return "UNKNOWN(" + kind + ")";
      }
    }
    
    public static void main(String []args) throws CopperParserException, IOException, FileNotFoundException {
        String root = System.getProperty("user.dir");
        File example1, example2, example3;
        if (root.substring(root.length() - 5).equals("tools"))  {
          example1 = new File(root + "/../examples/architecture/example1.wyc");
          example2 = new File(root + "/../examples/architecture/example2.wyc");
          example3 = new File(root + "/../examples/architecture/example3.wyc");
        } else  {
          example1 = new File(root + "/../../examples/architecture/example1.wyc");
          example2 = new File(root + "/../../examples/architecture/example2.wyc");
          example3 = new File(root + "/../../examples/architecture/example3.wyc");
        }
        BufferedReader source = new BufferedReader(new FileReader(
                                                                  //    example1
                                                                      example2
                                                                  //    example3
                                                                    ));
        ArchParser wp = new ArchParser(
                (TokenManager) new WyvernTokenManager<ArchLexer, ArchParserConstants>(source, "test", ArchLexer.class,
                        ArchParserConstants.class));

        /*Full list of tokens as collected by the token manager
        List<Token> tokens = new ArchLexer().parse(source, "test");
        for (Token t: tokens) {
          if (!kindToName(t.kind).equals("WHITESPACE")){
            System.out.println(kindToName(t.kind));
          }
        }*/
        
        //Parsing attempt
        try {
          Node start = wp.ArchDesc();
          ((SimpleNode) start).dump(">");
        } catch (ParseException e)  {
          e.printStackTrace();
        }

        /*What's left after parsing attempt*/
        Token t = wp.getNextToken();
        while (!kindToName(t.kind).equals("UNKNOWN(0)")){
            System.out.println(kindToName(t.kind));
            t = wp.getNextToken();
        }
        
        System.out.println("~PARSING DONE~");

    }
}

PARSER_END(ArchParser)

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Keywords */
{
  <COMPONENT: "component">
| <EXTERNAL: "external">
| <PORT: "port">
| <PROVIDES: "provides">
| <REQUIRES: "requires">
| <CONNECTOR: "connector">
| <VAL: "val">
| <ARCHITECTURE: "architecture">
| <COMPONENTS: "components">
| <CONNECTORS: "connectors">
| <ATTACHMENTS: "attachments">
| <CONNECT: "connect">
| <AND: "and">
| <WITH: "with">
| <ENTRYPOINTS: "entryPoints">
| <BINDINGS: "bindings">
| <IS: "is">
}

TOKEN : /* Logical Formatting */
{
  <DEDENT>
| <INDENT>
| <NEWLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <COLON: ":">
| <DOT: ".">
| <COMMA: ",">
}

/** Root production. */
SimpleNode ArchDesc() :
{  }
{
    ArchTypeDeclSeq()
    { return jjtThis; }
}

void ArchTypeDeclSeq() #void: 
{ }
{
    ArchTypeDecls() 
    ( ArchTypeDecls() )*
|
    <EOF>
}

void ArchTypeDecls() #void : 
{ }
{
    ComponentTypeDecl()       
|
    ConnectorTypeDecl()       
|
    ArchitectureTypeDecl()    
}

void ComponentTypeDecl() : 
{ Token name; }
{
    [ <EXTERNAL> { jjtThis.setExternal(true); } ] <COMPONENT> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ComponentTypeDeclBody()
            ( ComponentTypeDeclBody() {  } )*
            <DEDENT>
    { jjtThis.setTypeName(name.image); }
}


void ComponentTypeDeclBody() #void : 
{  }
{
    MemberDecls()         
|
    ArchTypeDecls()         
|
    BindingDecls()           

}

void ConnectorTypeDecl() : 
{ Token name; }
{
    <CONNECTOR> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ValDecl()
    (ValDecl())*
            <DEDENT>
    { jjtThis.setTypeName(name.image); }
}

void ArchitectureTypeDecl() : 
{ Token name; }
{
    <ARCHITECTURE> name=<IDENTIFIER>
    <NEWLINE> <INDENT> ArchElemDeclSeq()
            <DEDENT>
    { jjtThis.setTypeName(name.image); }
}

void ArchElemDeclSeq() #void : 
{  }
{
    ArchElemDecls() 
    (ArchElemDecls() )*
}

void ArchElemDecls() #void : 
{  }
{
    ComponentDecls()      
|
    ConnectorDecls()      
|
    AttachmentDecls()     
|
    EntryPointDecls()     
}

void ComponentDecls() #void :
{  }
{
    <COMPONENTS>
    <NEWLINE> <INDENT> 
            ComponentDeclAux()
            (ComponentDeclAux())*
            <DEDENT>
}

void ComponentDeclAux() #void : 
{ String type = null; }
{
    type=ComponentDecl("")
    (ComponentDecl(type))* <NEWLINE>
}

String ComponentDecl(String t) :
{ Token type; Token name; }
{
    type=<IDENTIFIER> name=<IDENTIFIER>     { jjtThis.setType(type.image); 
                                              jjtThis.setName(name.image); 
                                              return type.image; }
|
    <COMMA> name=<IDENTIFIER>               { jjtThis.setType(t); 
                                              jjtThis.setName(name.image); 
                                              return t; }
}

void ConnectorDecls() #void : 
{  }
{
    <CONNECTORS> 
    <NEWLINE> <INDENT> 
            ConnectorDeclAux()
            (ConnectorDeclAux())*
            <DEDENT>
}

void ConnectorDeclAux() #void : 
{ String type = null; }
{
    type=ConnectorDecl("")
    (ConnectorDecl(type))* <NEWLINE>
}

String ConnectorDecl(String t) :
{ Token type; Token name; }
{
    type=<IDENTIFIER> name=<IDENTIFIER>     { jjtThis.setType(type.image); 
                                              jjtThis.setName(name.image); 
                                              return type.image; }
|
    <COMMA> name=<IDENTIFIER>               { jjtThis.setType(t); 
                                              jjtThis.setName(name.image); 
                                              return t; }
}

void AttachmentDecls() #void : 
{  }
{
    <ATTACHMENTS>
    <NEWLINE> <INDENT> 
    <CONNECT> AttachmentDecl()
                (AttachmentDecl())*
            <DEDENT>
}

void AttachmentDecl() :
{ String p1; String p2; Token cntr; }
{
    p1=Segment() <AND> p2=Segment() { jjtThis.addPort(p1); jjtThis.addPort(p2); }
    ( <AND> p2=Segment() { jjtThis.addPort(p2); } )* <WITH> cntr=<IDENTIFIER> <NEWLINE>
    { jjtThis.setConnector(cntr.image); }
}

void BindingDecls() #void :
{  }
{
    <BINDINGS>
    <NEWLINE> <INDENT> 
        BindingDecl()
        (BindingDecl())*
    <DEDENT>
}

void BindingDecl() :
{ Token name; String target; }
{
    name=<IDENTIFIER> <IS> target=Segment() <NEWLINE>
    { jjtThis.setName(name.image); jjtThis.setTarget(target); }
}

void EntryPointDecls() #void : 
{  }
{
    <ENTRYPOINTS>
    <NEWLINE> <INDENT>
         EntryPointDecl()
        (EntryPointDecl())* 
            <DEDENT>
}

void EntryPointDecl() :
{ Token name; Token action; }
{
    name=<IDENTIFIER> <COLON> action=<IDENTIFIER> <NEWLINE>
    { jjtThis.setName(name.image); jjtThis.setAction(action.image); }
}

void MemberDecls() #void :
{  }
{
    ValDecl() 
| 
    PortDecl() 
}

void PortDecl() :
{ Token p; Token req = null; Token prov = null; }
{
    <PORT> p=<IDENTIFIER> <COLON> (<REQUIRES> req=<IDENTIFIER> { jjtThis.setRequires(req.image); }| 
                        <PROVIDES> prov=<IDENTIFIER> { jjtThis.setProvides(prov.image); }) <NEWLINE>
    { jjtThis.setPort(p.image); }
}

void ValDecl() :
{ Token t; Token name; }
{
    <VAL> name=<IDENTIFIER> <COLON> t=<IDENTIFIER> <NEWLINE>
    { jjtThis.setName(name.image); jjtThis.setType(t.image); }
}

String Segment() #void : 
{ String s; Token t; }
{
    t=<IDENTIFIER> { s = t.image; }
    ( <DOT> t=<IDENTIFIER> { s = s + "." + t.image; } )* 
    { return s; }
}











