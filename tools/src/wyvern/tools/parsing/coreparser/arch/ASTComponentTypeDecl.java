/* Generated By:JJTree: Do not edit this line. ASTComponentTypeDecl.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package wyvern.tools.parsing.coreparser.arch;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

import wyvern.target.corewyvernIL.support.InterpreterState;
import wyvern.tools.errors.ToolError;

public class ASTComponentTypeDecl extends SimpleNode {
  private boolean isExternal = false;
  private String typeName;

  public ASTComponentTypeDecl(int id) {
    super(id);
  }

  public ASTComponentTypeDecl(ArchParser p, int id) {
    super(p, id);
  }

  public boolean isExternal() {
    return isExternal;
  }

  public void setExternal(boolean isExternal) {
    this.isExternal = isExternal;
  }

  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String t) {
    typeName = t;
  }

  public String toString() {
    return super.toString() + " " + typeName + " : " + isExternal;
  }

  public boolean checkModule() {
    String rootLoc = null, wyvernPath = null;

    try {
      rootLoc = System.getenv("WYVERN_ROOT");
      if (rootLoc == null) {
        rootLoc = System.getProperty("user.dir");
      }

      wyvernPath = System.getenv("WYVERN_HOME");
      if (wyvernPath == null) {
        System.err.println(
            "must set WYVERN_HOME environmental variable to wyvern project directory");
        return false;
      }

      wyvernPath += "/stdlib/";
      // sanity check: is the wyvernPath a valid directory?
      if (!Files.isDirectory(Paths.get(wyvernPath))) {
        System.err.println(
            "Error: WYVERN_HOME is not set to a valid Wyvern project directory");
        return false;
      }
    } catch (ToolError e) {
      System.err.println(e.getMessage());
    }

    InterpreterState state = new InterpreterState(
        InterpreterState.PLATFORM_JAVA, new File(rootLoc),
        new File(wyvernPath));

    try {
      state.getResolver().resolveModule(typeName);
    } catch (ToolError e) {
      return false;
    }
    return true;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(ArchParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/*
 * JavaCC - OriginalChecksum=f5aec0da9432112df1e15710b91b7b28 (do not edit this
 * line)
 */
