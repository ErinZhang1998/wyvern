require stdout
require java

import wyvern.collections.arraylist
import wyvern.collections.Iterator
import wyvern.option

val arraylist = arraylist(java)

type Option = option.Option
type ArrayList = arraylist.ArrayList
type Some = arraylist.Some
type None = arraylist.None


//####################################Testing ArrayList###################################################

def twoLine():Unit
    stdout.print("\n")
    stdout.print("\n")

def printWithSpace(x:String):Unit
    stdout.print(x)
    stdout.print(" ")

def printIntWithSpace(x:Int):Unit
    stdout.printInt(x)
    stdout.print(" ")

def printBoolWithSpace(x:Boolean):Unit
    stdout.printBoolean(x)
    stdout.print(" ")

def printIntOption(x:Option[Int]):Unit
  match x:
    n:None => stdout.print("None ")
    s:Some => 
      val v = s.content
      stdout.print("Some(")
      stdout.printInt(v)
      stdout.print(") ")

def printStrOption(x:Option[String]):Unit
  match x:
    n:None => stdout.print("None ")
    s:Some => 
      val v = s.content
      stdout.print("Some(")
      stdout.print(v)
      stdout.print(") ")

def iterateIntArrayPrint(name:String, l: ArrayList[Int], i:Int):Unit
    val liter : Iterator[Int] = l.iterator()
    stdout.print("For list ")
    stdout.print(name)
    stdout.print("\n")
    def iterateIntArrayPrintH(iter:Iterator[Int], name:String, l: ArrayList[Int], i:Int):Unit
        if(iter.hasNext())
          stdout.print("\t")
          stdout.print(name)
          stdout.print("[")
          stdout.printInt(i)
          stdout.print("]: ")
          printIntOption(iter.next())
          stdout.print("\n")
          iterateIntArrayPrintH(liter, name, l, i+1)
         else
          unit
    iterateIntArrayPrintH(liter, name, l, i)


def iterateStrArrayPrint(name:String, l: ArrayList[String], i:Int):Unit
    val liter : Iterator[String] = l.iterator()
    stdout.print("For list ")
    stdout.print(name)
    stdout.print("\n")
    def iterateStrArrayPrintH(iter:Iterator[String], name:String, l: ArrayList[String], i:Int):Unit
        if(iter.hasNext())
          stdout.print("\t")
          stdout.print(name)
          stdout.print("[")
          stdout.printInt(i)
          stdout.print("]: ")
          printStrOption(iter.next())
          stdout.print("\n")
          iterateStrArrayPrintH(liter, name, l, i+1)
         else
          unit
    iterateStrArrayPrintH(liter, name, l, i)

var arrayTab : ArrayList[Int] = arraylist.tabulate[Int]((i:Int)=>i*2, 8)
iterateIntArrayPrint("arrayTab", arrayTab, 0)
twoLine()

stdout.print("arrayTab length is: ")
stdout.printInt(arrayTab.length())
twoLine()

var array1 : ArrayList[Int] = arraylist.ArrayList[Int](0)
/*Error should be thrown*/
//array1.set(0, 1)

array1.add(1)
array1.add(2)
array1.add(3)

val array1iter : Iterator[Int] = array1.iterator()
stdout.print("Does array1 has next one? ")
stdout.printBoolean(array1iter.hasNext())
twoLine()
stdout.print("array1[0]: ")
//stdout.printInt(array1iter.next())
printIntOption(array1iter.next())
twoLine()
stdout.print("array1[1]: ")
//stdout.printInt(array1iter.next())
printIntOption(array1iter.next())
twoLine()
stdout.print("Does array1 has next one? ")
stdout.printBoolean(array1iter.hasNext())
twoLine()
stdout.print("array1[2]: ")
//printIntWithSpace(array1iter.next())
printIntOption(array1iter.next())
twoLine()
stdout.print("Does array1 has next one? ")
printBoolWithSpace(array1iter.hasNext())
twoLine()
iterateIntArrayPrint("array1", array1, 0)
twoLine()
stdout.print("array 1 length is: ")
stdout.printInt(array1.length())
twoLine()


array1.add(4)
array1.add(5)
array1.add(6)
array1.add(7)
array1.add(8)

stdout.print("After adding 4,5,6,7,8 to array1: ")
iterateIntArrayPrint("array1", array1, 0)
twoLine()
stdout.print("array 1 length is: ")
stdout.printInt(array1.length())
twoLine()

array1.add(9)
stdout.print("After adding 9, array 1 length is: ")
stdout.printInt(array1.length())
twoLine()

stdout.print("array1[2] before adding 1: ")
stdout.printInt(array1.get(2))
twoLine()
array1.set(2, ((x:Int) => x+1)(array1.get(2)))
stdout.print("array1[2] after adding 1: ")
stdout.printInt(array1.get(2))
twoLine()

stdout.print("array1[0] before adding 1: ")
stdout.printInt(array1.get(0))
twoLine()
array1.set(0, ((x:Int) => x+1)(array1.get(0)))
stdout.print("array2[0] after adding 1: ")
stdout.printInt(array1.get(0))
twoLine()
iterateIntArrayPrint("array1", array1, 0)
twoLine()

val array2 = array1.map[Int]((x:Int) => x+1)
iterateIntArrayPrint("array2", array2, 0)
twoLine()

stdout.print("array2 added together using foldLeft: ")
stdout.printInt(array2.foldLeft[Int](((x:Int, y:Int) => x+y), 0))
twoLine()
stdout.print("array2 multiplied together using foldLeft: ")
stdout.printInt(array2.foldLeft[Int](((x:Int, y:Int) => x*y), 1))
twoLine()

val array3 = array1.map[Int]((x:Int) => x+10)
iterateIntArrayPrint("array3", array3, 0)
val array3_rev = array3.reverse()
stdout.print("After array 3 is reversed: ")
iterateIntArrayPrint("array3_rev", array3_rev, 0)
twoLine()

stdout.print("array3 added together using foldRight: ")
stdout.printInt(array3.foldRight[Int](((x:Int, y:Int) => x+y), 0))
twoLine()

stdout.print("After array 3 is reversed and foldRight: \n")
iterateIntArrayPrint("array3", array3, 0)
twoLine()

stdout.print("array3 added together using reduce: ")
stdout.printInt(array3.reduce(((x:Int, y:Int) => x+y), 0))
twoLine()

array3.add(5)
array3.add(8)
array3.add(7)
iterateIntArrayPrint("array3", array3, 0)
twoLine()
stdout.print("array3 added together after adding [5,8,7] using reduce: ")
stdout.printInt(array3.reduce(((x:Int, y:Int) => x+y), 0))
twoLine()

stdout.print("array4 is array3 with only even numbers: ")
val array4 = array3.filter((x:Int) => (x%2)==0)
iterateIntArrayPrint("array4", array4, 0)
twoLine()
stdout.print("Print array4 using do: ")
array4.do((x:Int)=>printIntWithSpace(x))
twoLine()

stdout.print("array4 length is: ")
stdout.printInt(array4.length())
twoLine()
def intCmp(x:Int, y:Int):Boolean
    x==y

stdout.print("indexOf 12 in array4 is: ")
stdout.printInt(array4.indexOf(12, ((x:Int, y:Int)=>intCmp(x,y))))
twoLine()
stdout.print("indexOf 18 in array4 is: ")
stdout.printInt(array4.indexOf(18, ((x:Int, y:Int)=>intCmp(x,y))))
twoLine()
stdout.print("indexOf 14 in array4 is: ")
stdout.printInt(array4.indexOf(14, ((x:Int, y:Int)=>intCmp(x,y))))
twoLine()


val array5 = arraylist.ArrayList[String](5)
array5.add("First")
array5.add("Second")
iterateStrArrayPrint("array5", array5, 0)
twoLine()
stdout.print("array5 length is: ")
stdout.printInt(array5.length())
twoLine()
stdout.print("array5 size is: ")
stdout.printInt(array5.size())
twoLine()

val array6 = arraylist.ArrayList[String](4)
array6.add("6 First")
array6.add("6 Second")
array6.add("6 Third")
array6.add("6 Fourth")

array5.addAll(array6)
iterateStrArrayPrint("array5", array5, 0)
twoLine()
stdout.print("array5 length is: ")
stdout.printInt(array5.length())
twoLine()
stdout.print("array5 size is: ")
stdout.printInt(array5.size())
twoLine()

stdout.print("array5[2]: ")
stdout.print(array5.get(2))
twoLine()
array5.addAt(2, "Add at 2")
iterateStrArrayPrint("array5", array5, 0)
twoLine()
stdout.print("array5 length is: ")
stdout.printInt(array5.length())
twoLine()
stdout.print("array5 size is: ")
stdout.printInt(array5.size())
twoLine()

array5.addAll(array6)
iterateStrArrayPrint("array5", array5, 0)
twoLine()
stdout.print("array5 length is: ")
stdout.printInt(array5.length())
twoLine()
stdout.print("array5 size is: ")
stdout.printInt(array5.size())
twoLine()
