module llist

import wyvern.option
import wyvern.collections.Iterator
import wyvern.collections.Iterable

type Option = option.Option

type LinkedList
    type E
    def iterator():Iterator[this.E]
    def map[T](f:this.E->T):Iterable[T]
    def head():Option[this.E]
    def tail():LinkedList[this.E]
    def isEmpty():Boolean

// ensure LinkedList subtypes Iterable
def toIterable(l:LinkedList):Iterable = l
    
def emptyDynamic():LinkedList[Dyn] = empty[Dyn]()
def empty[T]():LinkedList[T] = new
    type E = T
    def iterator():Iterator[T] = listIterator(this)
    def map[U](f:T->U):Iterable[U] = empty[U]()
    def head():Option[T] = option.None[T]()
    def tail():LinkedList[T] = this
    def isEmpty():Boolean = true


def consDynamic(elem:Dyn, rest:LinkedList[Dyn]):LinkedList[Dyn] = cons[Dyn](elem, rest)
def cons[T](elem:T, rest:LinkedList[T]):LinkedList[T] = new
    type E = T
    def iterator():Iterator[T] = listIterator(this)
        
    // TODO: make me tail recursive
    def map[U](f:T->U):LinkedList[U] = cons[U](f(elem),rest.map[U](f))
    
    def head():Option[T] = option.Some[T](elem)
    def isEmpty():Boolean = false
    def tail():LinkedList[T] = rest

def listIterator(list:LinkedList):Iterator[list.E] = new
    type E = list.E
    var current : LinkedList[list.E] = list
    def hasNext():Boolean = !this.current.isEmpty()
    def next():this.E
        val result = this.current.head().getOrElse(() => runtime.fail("call next() only if hasNext() returns true"))
        this.current = this.current.tail()
        result
        