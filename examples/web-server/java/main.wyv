require java

// require stdout
import stdout

import io
import fileio

import server
import httphandler
import THttpHandler
//import bmihandler
import simplehandler

import postprocessor

val stdout = stdout(java)

val handle = httphandler(simplehandlder)

val ioobj = io(java)
val fileioobj = fileio(java)
val ppobj = postprocessor(java)

val server = server(stdout) 

val serverSocket = ioobj.makeServerSocket(1254)

stdout.print("Waiting for a client connection...\n")

val soc = serverSocket.accept()
stdout.print("Accepted a connection.\n")

// Get a communication stream associated with the socket
val s1out = soc.getOutputStream()
val dos = ioobj.makeDataOutputStream(s1out)
server.sendHeaders(dos)

val filename = handle.file
val bufferedReader = fileioobj.makeBufferedReader(filename)
val msg = fileioobj.readFile(bufferedReader)
server.sendHtmlFile(dos,msg)

stdout.print("Sent Form to Client\n")
stdout.print("Wrote to DataOutputStream\n")

val soc2 = serverSocket.accept()
val slin = soc2.getInputStream()
val params: Dyn = ppobj.getPayload(slin)




// Close the connection but not the server socket
//dos.close()
// Call to "s1out.close()" causes an error.
// This call is not necessary, but was provided in the example cited.
//soc.close()