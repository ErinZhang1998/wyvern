require stdout
import wyvern.collections.list
import wyvern.archast
import wyvern.ast
import wyvern.option

type JSONCtrProperties
	val host : String
	val prt : Int
	metadata new
		def checkPortCompatibility(l : list.List[archast.PortDecl]) : Boolean
			type PortDecl = archast.PortDecl
			var p1 : PortDecl = archast.Nil
			var p2 : PortDecl = archast.Nil
			if (l.length() == 2)	
					val op1 : option.Option[PortDecl] = l.get(0)
					val op2 : option.Option[PortDecl] = l.get(1)
					if (op1.isDefined && op2.isDefined)
							p1 = op1.getOrElse(() => p1)
							p1 = op2.getOrElse(() => p1)
						else 
							false
					var requires : String = ""
					var provides : String = ""
					if (p1.getRequires() == "")
							if (p1.getProvides() == "")
									false
								else
									provides = p1.getProvides()
						else
							requires = p1.getRequires()
					if (requires == "")	
							requires = p2.getRequires()
						else	
							provides = p2.getProvides()
								
					if (requires == provides)
							true
						else
							false
					true
				else
					false

		def generateConnectorImpl(l : list.List[archast.PortDecl]) : list.List[ast.AST]
			if (this.checkPortCompatibility(l))
					val portList = list.make[ast.AST]()
						
					val CSIface_requires_port = "module def CSIface_requires_port(jsonCtrProps : JSONCtrProperties, java : Java) : CSIface\nimport io.io\nimport json\nimport io.Socket\nval io = io(java)\nval json = json(java)\ndef getVal(key : String) : String\n\tval tcpClient : Socket = io.makeSocket(jsonCtrProps.host, jsonCtrProps.prt)\n\tval out = tcpClient.getOutputStream()\n\tval in = tcpClient.getInputStream()\n\tval outData = io.makeDataOutputStream(out)\n\tval inData = io.makeDataInputStream(in)\n\toutData.writeUTF((json.serializeToJSON(key)).toString())\n\tinData.readUTF()\n"
					val test = "module def test(java : Java)\nimport stdout\nval a = \"A\"\ndef three() : Int\n\t3\n"
					val CSIface_provides_port = ""
					
					val requiresAST = ast.parseExpressionNoContext(CSIface_requires_port)
					
					portList.append(requiresAST)
					portList
				else
					list.make[ast.AST]()

		def generateConnectorInit() : Unit
			unit

