require stdout
import wyvern.collections.list
import wyvern.archast
import wyvern.ast
import wyvern.option

type JSONCtrProperties
	val host : String
	val prt : Int
	metadata new
		def checkPortCompatibility(l : list.List[archast.PortDecl]) : Boolean
			type PortDecl = archast.PortDecl
			var p1 : PortDecl = archast.Nil
			var p2 : PortDecl = archast.Nil
			if (l.length() == 2)	
					val op1 : option.Option[PortDecl] = l.get(0)
					val op2 : option.Option[PortDecl] = l.get(1)
					if (op1.isDefined && op2.isDefined)
							p1 = op1.getOrElse(() => p1)
							p1 = op2.getOrElse(() => p1)
						else 
							false
					var requires : String = ""
					var provides : String = ""
					if (p1.getRequires() == "")
							if (p1.getProvides() == "")
									false
								else
									provides = p1.getProvides()
						else
							requires = p1.getRequires()
					if (requires == "")	
							requires = p2.getRequires()
						else	
							provides = p2.getProvides()
								
					if (requires == provides)
							true
						else
							false
					true
				else
					false

		def generateConnectorImpl(l : list.List[archast.PortDecl]) : list.List[ast.AST]
			if (this.checkPortCompatibility(l))
					var astList : list.List[ast.AST] = list.make[ast.AST]()
					// go through both ports in the list
					val p1 : archast.PortDecl = l.get(0).getOrElse(() => archast.Nil)
					val p2 : archast.PortDecl = l.get(1).getOrElse(() => archast.Nil)

					// start making the ASTs for generation
					var clientAST : ast.AST 
					var serverAST : ast.AST

					// add ASTs to astList to be returned
					astList.append(serverAST)
					astList.append(clientAST)
					astList
				else
					list.make[ast.AST]()

		def generateConnectorInit() : Unit
			unit

